{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    quantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice += existingItem.totalPrice;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      if (existingItem.quantity > 1) {\n        existingItem.quantity--;\n        existingItem.totalPrice -= existingItem.price;\n      } else {\n        state.items = state.items.filter(item => item.id !== id);\n      }\n    }\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","quantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"sources":["F:/udemy/redux-advanced/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    items: [],\r\n    quantity: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const newItem = action.payload;\r\n      const existingItem = state.items.find(item => item.id === newItem.id);\r\n      if (!existingItem) {\r\n        state.items.push({\r\n          itemId: newItem.id, \r\n          price: newItem.price, \r\n          quantity: 1, \r\n          totalPrice: newItem.price, \r\n          name: newItem.title\r\n        });\r\n      } else {\r\n        existingItem.quantity++;\r\n        existingItem.totalPrice += existingItem.totalPrice;\r\n      }\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const id = action.payload;\r\n      const existingItem = state.items.find(item => item.id === id);\r\n      if (existingItem.quantity > 1) {\r\n        existingItem.quantity--;\r\n        existingItem.totalPrice -= existingItem.price;\r\n      } else {\r\n        state.items = state.items.filter(item => item.id !== id);\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const cartActions = cartSlice.actions;\r\n\r\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC3B,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9B,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACrE,IAAI,CAACH,YAAY,EAAE;QACjBJ,KAAK,CAACJ,KAAK,CAACY,IAAI,CAAC;UACfC,MAAM,EAAEP,OAAO,CAACK,EAAE;UAClBG,KAAK,EAAER,OAAO,CAACQ,KAAK;UACpBb,QAAQ,EAAE,CAAC;UACXc,UAAU,EAAET,OAAO,CAACQ,KAAK;UACzBhB,IAAI,EAAEQ,OAAO,CAACU;QAChB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLR,YAAY,CAACP,QAAQ,EAAE;QACvBO,YAAY,CAACO,UAAU,IAAIP,YAAY,CAACO,UAAU;MACpD;IACF,CAAC;IACDE,kBAAkBA,CAACb,KAAK,EAAEC,MAAM,EAAE;MAChC,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAK,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC7D,IAAIH,YAAY,CAACP,QAAQ,GAAG,CAAC,EAAE;QAC7BO,YAAY,CAACP,QAAQ,EAAE;QACvBO,YAAY,CAACO,UAAU,IAAIP,YAAY,CAACM,KAAK;MAC/C,CAAC,MAAM;QACLV,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACkB,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC1D;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMQ,WAAW,GAAGtB,SAAS,CAACuB,OAAO;AAE5C,eAAevB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}